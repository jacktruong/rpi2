#!/bin/sh
# Modified version raspi-config http://github.com/asb/raspi-config
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0
BLACKLIST=/etc/modprobe.d/raspi-blacklist.conf
CONFIG=/boot/config.txt
AUTOLOGIN=/etc/systemd/system/getty\@tty1.service.d/autologin.conf

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
}

do_about() {
  whiptail --msgbox "\
Nope, not even going to try putting stuff in this box.
\
" 20 70 1
}

do_expand_rootfs() {
  # sane image should always be in /dev/mmcblk0
  # with boot partition as p1, root as p2

  PART_NUM=2
  LAST_PART_NUM=2

  fdisk /dev/mmcblk0 <<EOF
p
d
2
n
p
2


p
w
EOF
  ASK_TO_REBOOT=1

  partprobe /dev/mmcblk0
  resize2fs /dev/mmcblk0p2

  if [ "$INTERACTIVE" = True ]; then
    whiptail --msgbox "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot" 20 60 2
  fi
}

do_change_hostname() {
  whiptail --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1

  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_change_location() {
  if [ -e /home/kiosk/.location ]; then
    CURRENT_LOCATION=`cat /home/kiosk/.location | cut -d "=" -f 2 | tr -d "\""`
  fi
  NEW_LOCATION=$(whiptail --inputbox "Please enter a location" 20 60 "$CURRENT_LOCATION" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    #sed -i "s/$CURRENT_LOCATION/$NEW_LOCATION/g" /home/kiosk/.location
    echo "export LOCATION=\"$NEW_LOCATION\"" > /home/kiosk/.location
    chown kiosk:kiosk /home/kiosk/.location
    ASK_TO_REBOOT=1
  fi
}

disable_enginfo_config_at_boot() {
  if [ -e /etc/profile.d/enginfo-config.sh ]; then
    rm -f /etc/profile.d/enginfo-config.sh
  fi

  if [ -e $AUTOLOGIN ]; then
    sed -i 's/root/kiosk/g' $AUTOLOGIN
  fi
}

do_finish() {
  disable_enginfo_config_at_boot
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

#if [ "GET" = "${OPT_MEMORY_SPLIT:-}" ]; then
#  set -u # Fail on unset variables
#  get_current_memory_split
#  echo $CURRENT_MEMSPLIT
#  exit 0
#fi

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo raspi-config'\n"
  exit 1
fi

if [ -n "${OPT_MEMORY_SPLIT:-}" ]; then
  set -e # Fail when a command errors
  set_memory_split "${OPT_MEMORY_SPLIT}"
  exit 0
fi

#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "Raspberry Pi Software Configuration Tool (raspi-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Expand Filesystem" "Ensures that all of the SD card storage is available to the OS" \
    "2 Location" "Set the location of thie Raspberry Pi" \
    "3 Hostname" "Set the visible name for this Pi on a network" \
    "4 About enginfo-config" "Information about this configuration tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_expand_rootfs ;;
      2\ *) do_change_location ;;
      3\ *) do_change_hostname ;;
      4\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
